import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.user.ApplicationUser
import com.atlassian.jira.event.issue.IssueEvent
import com.atlassian.jira.issue.comments.Comment

// Accessors
def commentManager = ComponentAccessor.commentManager
def issue = event.issue as Issue
def comment = event.comment as Comment

// Only for issue types Incident or Event
if (!(issue.issueType.name in ["Incident", "Event"])) {
    return
}

// Exclude Automation users
def automationUsernames = ["automation", "automation for jira"]
if (automationUsernames.any { comment.authorApplicationUser?.username?.toLowerCase()?.contains(it) }) {
    return
}

// Check if this is the first human comment
def allComments = commentManager.getComments(issue)
def humanComments = allComments.findAll {
    !(automationUsernames.any { bot -> it.authorApplicationUser?.username?.toLowerCase()?.contains(bot) })
}

if (humanComments.size() > 1) {
    return // Not first human comment
}

// Assign issue to commenter
issue.setAssignee(comment.authorApplicationUser)
ComponentAccessor.issueManager.updateIssue(comment.authorApplicationUser, issue, EventDispatchOption.DO_NOT_DISPATCH, false)

// Transition issue to "In Progress"
def workflowManager = ComponentAccessor.workflowManager
def issueService = ComponentAccessor.issueService
def transitionValidation = issueService.validateTransition(
    comment.authorApplicationUser,
    issue.id,
    21, // Replace with your actual "In Progress" transition ID
    issueService.newIssueInputParameters()
)

if (transitionValidation.isValid()) {
    issueService.transition(comment.authorApplicationUser, transitionValidation)
}


import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.bc.issue.IssueService
import com.atlassian.jira.event.type.EventDispatchOption

// üîÅ These should be passed in via Automation
def issueKey = binding.variables.get("issueKey") // from {{issue.key}}
def username = binding.variables.get("username") // from {{comment.author.key}}

def issueManager = ComponentAccessor.issueManager
def userManager = ComponentAccessor.userManager
def issueService = ComponentAccessor.issueService

def user = userManager.getUserByKey(username)
def issue = issueManager.getIssueByCurrentKey(issueKey)

if (!user || !issue) {
    return "‚ùå Invalid user or issue: user=${user}, issue=${issue}"
}

// Determine transition ID based on issue type
def transitionId
switch (issue.issueType.name) {
    case "Event":
        transitionId = 321
        break
    case "Incident":
        transitionId = 11
        break
    default:
        return "‚ùå No transition defined for issue type '${issue.issueType.name}'"
}

// Assign the issue to commenter
issue.setAssignee(user)
issueManager.updateIssue(user, issue, EventDispatchOption.DO_NOT_DISPATCH, false)

// Perform transition
def validation = issueService.validateTransition(
    user,
    issue.id,
    transitionId,
    issueService.newIssueInputParameters()
)

if (validation.isValid()) {
    issueService.transition(user, validation)
    return "‚úÖ Assigned to ${user.username} and transitioned to In Progress (ID ${transitionId})"
} else {
    return "‚ùå Transition failed: ${validation.errorCollection}"
}

