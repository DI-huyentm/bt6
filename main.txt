import com.atlassian.jira.component.ComponentAccessor
import com.atlassian.jira.issue.Issue
import com.atlassian.jira.user.ApplicationUser
import com.atlassian.jira.event.issue.IssueEvent
import com.atlassian.jira.issue.comments.Comment

// Accessors
def commentManager = ComponentAccessor.commentManager
def issue = event.issue as Issue
def comment = event.comment as Comment

// Only for issue types Incident or Event
if (!(issue.issueType.name in ["Incident", "Event"])) {
    return
}

// Exclude Automation users
def automationUsernames = ["automation", "automation for jira"]
if (automationUsernames.any { comment.authorApplicationUser?.username?.toLowerCase()?.contains(it) }) {
    return
}

// Check if this is the first human comment
def allComments = commentManager.getComments(issue)
def humanComments = allComments.findAll {
    !(automationUsernames.any { bot -> it.authorApplicationUser?.username?.toLowerCase()?.contains(bot) })
}

if (humanComments.size() > 1) {
    return // Not first human comment
}

// Assign issue to commenter
issue.setAssignee(comment.authorApplicationUser)
ComponentAccessor.issueManager.updateIssue(comment.authorApplicationUser, issue, EventDispatchOption.DO_NOT_DISPATCH, false)

// Transition issue to "In Progress"
def workflowManager = ComponentAccessor.workflowManager
def issueService = ComponentAccessor.issueService
def transitionValidation = issueService.validateTransition(
    comment.authorApplicationUser,
    issue.id,
    21, // Replace with your actual "In Progress" transition ID
    issueService.newIssueInputParameters()
)

if (transitionValidation.isValid()) {
    issueService.transition(comment.authorApplicationUser, transitionValidation)
}
